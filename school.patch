From 1917621f00449ef8f7b5867c7f3076d5ba64ea98 Mon Sep 17 00:00:00 2001
From: nuker <nuker@decentnukeri.lan>
Date: 15 Apr 2025, 10:02:01



diff --git a/pom.xml b/pom.xml
new file mode 100644
index 0000000..ab2e1b6
--- /dev/null
+++ b/pom.xml
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+    <groupId>com.mycompany</groupId>
+    <artifactId>Assignmentst10466215</artifactId>
+    <version>1.0-SNAPSHOT</version>
+    <packaging>jar</packaging>
+    <dependencies>
+        <dependency>
+            <groupId>org.junit.jupiter</groupId>
+            <artifactId>junit-jupiter-api</artifactId>
+            <version>5.10.3</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.junit.jupiter</groupId>
+            <artifactId>junit-jupiter-params</artifactId>
+            <version>5.10.3</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.junit.jupiter</groupId>
+            <artifactId>junit-jupiter-engine</artifactId>
+            <version>5.10.3</version>
+            <scope>test</scope>
+        </dependency>
+    </dependencies>
+    <properties>
+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+        <maven.compiler.release>23</maven.compiler.release>
+        <exec.mainClass>com.mycompany.assignmentst10466215.Assignmentst10466215</exec.mainClass>
+    </properties>
+</project>
\ No newline at end of file
diff --git a/src/main/java/com/mycompany/assignmentst10466215/Assignmentst10466215.java b/src/main/java/com/mycompany/assignmentst10466215/Assignmentst10466215.java
new file mode 100644
index 0000000..b4f2e4a
--- /dev/null
+++ b/src/main/java/com/mycompany/assignmentst10466215/Assignmentst10466215.java
@@ -0,0 +1,58 @@
+/*
+ * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
+ */
+
+package com.mycompany.assignmentst10466215;
+
+/**
+ *
+ * @author nuker
+ */
+
+
+
+import java.util.Scanner;
+
+public class Assignmentst10466215 {
+
+    public static void main(String[] args) {
+      
+Scanner scanner = new Scanner(System.in);
+        Login loginApp = new Login();
+        System.out.println("Welcome to the Registration Portal");
+        
+        // Ask for name
+        System.out.print("Put in your first name: ");
+        loginApp.firstName = scanner.nextLine();
+        
+        System.out.print("Put in your last name: ");
+        loginApp.lastName = scanner.nextLine();
+        
+        // Registration
+        System.out.print("Enter username (must contain _ and be 5 characters max): ");
+        String user = scanner.nextLine();
+        
+        System.out.print("Enter password (8+ chars, capital letter, number, special char): ");
+        String pass = scanner.nextLine();
+        
+        System.out.print("Enter your cell phone number (with +27): ");
+        String cell = scanner.nextLine();
+        
+        String regMessage = loginApp.registerUser(user, pass, cell);
+        System.out.println(regMessage);
+        
+        if (regMessage.equals("User successfully registered.")) {
+            // Login
+            System.out.print("Enter username: ");
+            String loginUser = scanner.nextLine();
+            
+            System.out.print("Enter password: ");
+            String loginPass = scanner.nextLine();
+            
+            boolean isLoggedIn = loginApp.loginUser(loginUser, loginPass);
+            System.out.println(loginApp.returnLoginStatus(isLoggedIn));
+        }
+        
+        scanner.close();
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/com/mycompany/assignmentst10466215/Login.java b/src/main/java/com/mycompany/assignmentst10466215/Login.java
new file mode 100644
index 0000000..0c6b6f2
--- /dev/null
+++ b/src/main/java/com/mycompany/assignmentst10466215/Login.java
@@ -0,0 +1,146 @@
+/*
+ * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
+ * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
+ */
+package com.mycompany.assignmentst10466215;
+
+/**
+ *
+ * @author nuker
+ */
+
+
+import java.util.regex.Pattern;
+public class Login {
+    
+    public String username;
+    public String password;
+    public String cellPhoneNumber;
+    public String firstName;
+    public String lastName;
+    private boolean loggedIn;
+
+    // Constructor
+    public Login() {
+        this.loggedIn = false;
+    }
+
+    // Method to check if username is valid
+    public boolean checkUserName() {
+        // Check if username contains an underscore and is no more than 5 characters
+        return username != null && username.contains("_") && username.length() <= 5;
+    }
+
+    // Method to check if password meets complexity requirements
+    public boolean checkPasswordComplexity() {
+        // Check if password is null or empty
+        if (password == null || password.isEmpty()) {
+            return false;
+        }
+
+        // Check if password is at least 8 characters long
+        if (password.length() < 8) {
+            return false;
+        }
+
+        // Check if password contains a capital letter
+        boolean hasCapital = false;
+        for (char c : password.toCharArray()) {
+            if (Character.isUpperCase(c)) {
+                hasCapital = true;
+                break;
+            }
+        }
+        if (!hasCapital) {
+            return false;
+        }
+
+        // Check if password contains a number
+        boolean hasNumber = false;
+        for (char c : password.toCharArray()) {
+            if (Character.isDigit(c)) {
+                hasNumber = true;
+                break;
+            }
+        }
+        if (!hasNumber) {
+            return false;
+        }
+
+        // Check if password contains a special character
+        boolean hasSpecial = false;
+        String specialChars = "!@#$%^&*()_-+=<>?/[]{}|:;";
+        for (char c : password.toCharArray()) {
+            if (specialChars.contains(String.valueOf(c))) {
+                hasSpecial = true;
+                break;
+            }
+        }
+        return hasSpecial;
+    }
+
+    // Method to check if cell phone number is valid
+    public boolean checkCellPhoneNumber() {
+        // Cell phone must start with +27 (South African country code) and be followed by 9 digits
+        if (cellPhoneNumber == null) {
+            return false;
+        }
+        
+        // Using regular expression to check cell phone format
+        // Reference: Generated with assistance from OpenAI's ChatGPT on April 14, 2025
+        // Format: Must start with +27 followed by 9 digits
+        return cellPhoneNumber.matches("\\+27\\d{9}");
+    }
+
+    // Method to register a user - overloaded version with parameters
+    public String registerUser(String username, String password, String cellPhoneNumber) {
+        this.username = username;
+        this.password = password;
+        this.cellPhoneNumber = cellPhoneNumber;
+        
+        return registerUser();
+    }
+
+    // Method to register a user
+    public String registerUser() {
+        if (!checkUserName()) {
+            return "Username is not correctly formatted, please ensure that your username contains an underscore and is no more than five characters in length.";
+        }
+
+        if (!checkPasswordComplexity()) {
+            return "Password is not correctly formatted; please ensure that the password contains at least eight characters, a capital letter, a number, and a special character.";
+        }
+
+        if (!checkCellPhoneNumber()) {
+            return "Cell number is incorrectly formatted or does not contain an international code, please correct the number and try again.";
+        }
+
+        return "User successfully registered.";
+    }
+
+    // Method to verify login details
+    public boolean loginUser(String enteredUsername, String enteredPassword) {
+        if (username != null && password != null && 
+            username.equals(enteredUsername) && 
+            password.equals(enteredPassword)) {
+            loggedIn = true;
+            return true;
+        }
+        loggedIn = false;
+        return false;
+    }
+
+    // Method to return login status message with parameter
+    public String returnLoginStatus(boolean isLoggedIn) {
+        if (isLoggedIn) {
+            return "Welcome " + firstName + " ," + lastName + " it is great to see you again.";
+        } else {
+            return "Username or password incorrect, please try again.";
+        }
+    }
+
+    // Method to return login status message without parameter (uses class state)
+    public String returnLoginStatus() {
+        return returnLoginStatus(loggedIn);
+    }
+}
\ No newline at end of file
diff --git a/src/test/java/loginapp.java b/src/test/java/loginapp.java
new file mode 100644
index 0000000..d4a2cd9
--- /dev/null
+++ b/src/test/java/loginapp.java
@@ -0,0 +1,95 @@
+/*
+ * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
+ * Click nbfs://nbhost/SystemFileSystem/Templates/UnitTests/JUnit5TestClass.java to edit this template
+ */
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.AfterAll;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.Test;
+import static org.junit.jupiter.api.Assertions.*;
+import org.junit.jupiter.api.Test;
+import static org.junit.jupiter.api.Assertions.*;
+
+/**
+ *
+ * @author nuker
+ */
+public class loginapp {
+    
+    public loginapp() {
+    }
+      public void testUsernameWithUnderscore() {
+       
+
+public class LoginTest {
+    Login loginApp = new Login();
+
+    @Test
+    void testCheckUserName_Valid() {
+        assertTrue(loginApp.checkUserName("user_"), "Username should be valid.");
+    }
+
+    @Test
+    void testCheckUserName_Invalid() {
+        assertFalse(loginApp.checkUserName("user123"), "Username should be invalid.");
+    }
+
+    @Test
+    void testCheckPasswordComplexity_Valid() {
+        assertTrue(loginApp.checkPasswordComplexity("StrongP@ss1"), "Password should be valid.");
+    }
+
+    @Test
+    void testCheckPasswordComplexity_Invalid() {
+        assertFalse(loginApp.checkPasswordComplexity("password"), "Password should be invalid.");
+    }
+
+    @Test
+    void testCheckCellPhoneNumber_Valid() {
+        assertTrue(loginApp.checkCellPhoneNumber("+27839123456"), "Cell phone number should be valid.");
+    }
+
+    @Test
+    void testCheckCellPhoneNumber_Invalid() {
+        assertFalse(loginApp.checkCellPhoneNumber("0839123456"), "Cell phone number should be invalid.");
+    }
+
+    @Test
+    void testRegisterUser_Success() {
+        String result = loginApp.registerUser("user_", "StrongP@ss1", "+27839123456");
+        assertEquals("User successfully registered.", result);
+    }
+
+    @Test
+    void testRegisterUser_Fail_Username() {
+        String result = loginApp.registerUser("user123", "StrongP@ss1", "+27839123456");
+        assertEquals("Username is not correctly formatted, please ensure that your username contains an underscore and is no more than five characters in length.", result);
+    }
+
+    @Test
+    void testRegisterUser_Fail_Password() {
+        String result = loginApp.registerUser("user_", "password", "+27839123456");
+        assertEquals("Password is not correctly formatted; please ensure that the password contains at least eight characters, a capital letter, a number, and a special character.", result);
+    }
+
+    @Test
+    void testRegisterUser_Fail_CellNumber() {
+        String result = loginApp.registerUser("user_", "StrongP@ss1", "0839123456");
+        assertEquals("Cell phone number incorrectly formatted or does not contain international code.", result);
+    }
+
+    @Test
+    void testLoginUser_Success() {
+        loginApp.registerUser("user_", "StrongP@ss1", "+27839123456");
+        assertTrue(loginApp.loginUser("user_", "StrongP@ss1"), "Login should be successful.");
+    }
+
+    @Test
+    void testLoginUser_Fail() {
+        loginApp.registerUser("user_", "StrongP@ss1", "+27839123456");
+        assertFalse(loginApp.loginUser("user_", "WrongPass"), "Login should fail.");
+    }
+}
+}
